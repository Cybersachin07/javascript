Issues with Object type data:
- Keys are always string type.
- You can't have keys of other data type.
- It is schema based data.
- It uses all explicit methods to handle manipulation.
- It is slow in interactions.

                        Map Type
- It is a key and value collection, same like object.
- Key can be any type and value can be any type.
- It is schema less.
- It provides all implicit methods for handling manipulation.
- It is faster when compared to object.

Syntax:
        var data = new Map();

        data.set(key,value);        adds a new value
        data.get(key)                reads the value
        data.remove(key)            removes a key
        data.clear()                removes all keys
        data.has(key)                check for a key (Boolean)
        data.size                    returns count of keys
        data.keys()                returns all keys
        data.values()                returns all values
        data.entries()                returns all keys and values

Ex:
<script>
    var data = new Map();
    data.set(1, "Samsung TV");
    data.set("Mobile", {Price: 24000.44, Rating:{rate:4.5, count:500}});

    document.write(data.get("Mobile").Price + "<br>");

    for(var item of data.entries()){
        document.write(item + "<br>");
    }
</script>

                            Date & Time
- JavaScript provides a date constructor "date()".
- It allocates memory for date and time type of values.

Syntax:
        var dept = new Date();        // It loads current date & time into memory

- You can initialize specific date and time as string in date constructor using following format.
        "year-month-day  hours:minutes:seconds.milliSeconds"

Syntax:
        var dept = new Date("2025-02-22  16:32:26.58");

- To display date and time values JavaScript provides following methods

        getHours()                0 to 23
        getMinutes()                0 to 59
        getSeconds()                0 to 59
        getMilliSeconds()            0 to 99
        getDay()                    0=sunday, 1=monday
        getDate()                    1-28,29,30,31
        getMonth()                0=Jan, 1=Feb..
        getFullYear()                2025
        toDateString()
        toLocaleDateString()
        toTimeString()
        toLocaleTimeString()

Ex:
<script>
     var departure = new Date("2025-02-22 17:34:42.67");
     document.write(departure.toDateString());
</script>

Ex:
<script>
     var departure = new Date();

     var weekdays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thrusday", "Friday", "Saturday"];

     var months = ["January", "February", "March", "April","May", "June", "July", "August", "September", "October", "November", "December"];
     
     document.write(` ${weekdays[departure.getDay()]} , ${months[departure.getMonth()]} ${departure.getDate()} -  ${departure.getFullYear()}`);

</script>

- JavaScript provides setter methods to set date and time values.

        setHours()
        setMinutes()
        setSeconds()
        setMilliSeconds()
        setDate()
        setMonth()
        setYear()        // deprecated
        setFullYear()
   
Ex:
<script>
     var departure = new Date();

     departure.setDate(21);
     departure.setMonth(3);

     var weekdays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thrusday", "Friday", "Saturday"];

     var months = ["January", "February", "March", "April","May", "June", "July", "August", "September", "October", "November", "December"];
      departure.getYear();
     document.write(` ${weekdays[departure.getDay()]} , ${months[departure.getMonth()]} ${departure.getDate()} -  ${departure.getFullYear()}`);
</script>    
       

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }
        .widget {
            width: 800px;
            height: 400px;
            background-image: url("../public/images/weather.jpg");
            background-size: 50% 100%;
            background-repeat: no-repeat;
            background-position: center right;
            background-color: rgb(7, 139, 192);
            box-shadow: 5px 5px 2px black;
            display: grid;
            grid-template-columns: 6fr 6fr;
        }
        #lblTemp {
            font-size: 50px;
            font-family: Arial;
            color:white;
        }
    </style>
    <script>
        var cityName = '';
        function LoadWeatherData(){
            var api_key = "1318ca6725c69160d346c41fc0612596";
            var url = `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${api_key}&units=metric`;

            fetch(url)
            .then(function(response){
                return response.json();
            })
            .then(function(data){
                console.log(data);
                document.getElementById("lblCity").innerHTML = `${data.name.toUpperCase()}<br><span class='text-warning fs-4'>${data.weather[0].description.toUpperCase()}</span>`;
                document.getElementById("lblTemp").innerHTML = ` <span class='bi bi-sun-fill'></span> ${Math.round(data.main.temp)} &deg; C`;
                document.getElementById("lblWind").innerHTML = `${data.wind.speed} KMPH`;
                document.getElementById("lblHumid").innerHTML = `${data.main.humidity} %`;
            })
        }
        function SearchClick(){
            cityName = document.getElementById("txtCity").value;
            LoadWeatherData();
        }
        function CityChange(){
            cityName = document.getElementById("lstCities").value;
            LoadWeatherData();
        }
        function bodyload(){
            var now = new Date();
            document.getElementById("lblDate").innerHTML = now.toDateString();
            var msg = document.getElementById("lblMsg");
         
            var hrs = now.getHours();
            if(hrs>=0 && hrs<12) {
                msg.innerHTML = `Good Morning !`;
                msg.className = "bi bi-alt-high fs-4 text-light ";
            } else if(hrs>=12 && hrs<=17) {
                msg.innerHTML = `Good Afternoon !`;
                msg.className = "bi bi-brightness-high fs-4 text-light";
            } else if(hrs>17 && hrs<23) {
                msg.innerHTML = `Good Evening`;
                msg.className = "bi bi-brightness-high-fill fs-4 text-light";
            }
        }
    </script>
</head>
<body onload="bodyload()">
   <div class="widget">
        <div style="padding: 20px;">
            <div class="input-group">
                <input type="text" id="txtCity" placeholder="Enter City Name" class="form-control">
                <button onclick="SearchClick()" class="bi bi-search btn btn-warning"></button>
            </div>
            <div class="mt-4">
               <label id="lblMsg" class="fs-5 fw-bold text-light"></label>
            </div>
            <div class="d-flex justify-content-center align-items-center" style="height:100%">
                <div>
                    <div id="lblDate" class="fs-4 text-light my-3"></div>
                    <span id="lblTemp"></span>
                    <dl class="text-light row">
                        <dt class="col-3">Wind</dt>
                        <dd class="col-9" id="lblWind"></dd>
                        <dt class="col-3">Humidity</dt>
                        <dd class="col-9" id="lblHumid"></dd>
                    </dl>
                </div>
            </div>
        </div>
        <div style="padding: 100px;">
            <select id="lstCities" class="form-select" onchange="CityChange()">
                <option>Frequently Viewed</option>
                <option>Delhi</option>
                <option>Hyderabad</option>
                <option>Chennai</option>
            </select>
            <h2 id="lblCity"></h2>
           
        </div>
   </div>
</body>
</html>

                           Timer Events
setTimeout()
clearTimeout()
setInterval()
clearInterval()